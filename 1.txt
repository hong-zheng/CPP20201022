#define _CRT_SECURE_NO_WARNINGS 1
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
using namespace std;


/*
// 背包问题
vector<vector<int>> memo;
int bestValue(const vector<int>& w, vector<int>& v,int index, int c){
	if (index < 0 || c <= 0)
		return 0;
	if (memo[index][c] != -1)
		return memo[index][c];
	int res = bestValue(w, v, index - 1, c);
	if (c>w[index])
		res = max(res, v[index] + bestValue(w, v, index - 1, c - w[index]));
	memo[index][c] = res;
	return res;
}
int knapsack01(const vector<int>& w, vector<int>& v, int c){
	int n = w.size();
	memo = vector<vector<int>>(n, vector<int>(c + 1, -1));
	return bestValue(w, v, n-1,c);
}
#include<assert.h>
// 动态规划从上至下搜索结果
int knapsack02(const vector<int>& w, vector<int>& v, int c){
	assert(w.size() == v.size());
	int n = w.size();
	if (n == 0) return 0;
	vector<vector<int>> memo(n, vector<int>(c + 1, -1));
	for (int j = 0; j <= c; ++j){
		memo[0][j] = (j >= w[0] ? v[0] : 0);
	}
	for (int i = 0; i < n; ++i){
		for (int j = 0; j <= c; ++j){
			memo[i][j] = memo[i - 1][j];
			if (j >= w[i]){
				memo[i][j] = max(memo[i][j], v[i] + memo[i-1][j-w[i]]);
			}
		}
	}
	return memo[n - 1][c];
}

// 求其最大价值
int maxValue(vector<int>& w, vector<int>& v, int C){
	assert(w.size() == v.size());
	int n = w.size();
	if (n == 0) return 0;
	vector<vector<int>> memo(n, vector<int>(C + 1, -1));
	for (int i = 0; i < C + 1; ++i){
		memo[0][i] = (i >= w[0] ? v[0] : 0);
	}
	for (int i = 0; i < n; ++i){
		for (int j = 0; j < C + 1; ++j){
			memo[i][j] = memo[i - 1][j];
			if (j >= w[i]){
				memo[i][j] = max(memo[i][j], v[i] + memo[i][j - w[i]]);
			}
		}
	}
	return memo[n - 1][C];
}



// 可以优化空间复杂度
int maxV(const vector<int>& w, const vector<int>& v, int C){
	assert(w.size() == v.size());
	int n = w.size();
	if (n < 1 || C < 1) return 0;
	vector<vector<int>> memo(n, vector<int>(C + 1, -1));

	for (int j = 0; j < n; ++j){
		memo[0][j] = (j >= w[0]?v[0]:0);
	}
	for (int i = 0; i < n; ++i){
		for (int j = 0; j <= C; ++j){
			memo[i][j] = memo[i - 1][j];
			if (j >= w[i]){
				memo[i][j] = max(memo[i][j], memo[i - 1][j - w[i]] + v[i]);
			}
		}
	}
	return memo[n - 1][C];
}


// 可以优化空间复杂度
int maxV(const vector<int>& w, const vector<int>& v, int C){
	assert(w.size() == v.size());
	int n = w.size();
	if (n < 1 || C < 1) return 0;
	vector<vector<int>> memo(2, vector<int>(C + 1, -1));

	for (int j = 0; j < n; ++j){
		memo[0][j] = (j >= w[0] ? v[0] : 0);
	}
	for (int i = 0; i < n; ++i){
		for (int j = 0; j <= C; ++j){
			memo[i % 2][j] = memo[(i - 1) % 2][j];
			if (j >= w[i]){
				memo[i % 2][j] = max(memo[i % 2][j], memo[(i - 1) % 2][j - w[i]] + v[i]);
			}
		}
	}
	return memo[(n - 1) % 2][C];
}

int dp(const vector<int>& w, const vector<int>& v, int C){
	assert(w.size() == v.size() && C>=0);
	int n = w.size();
	if (n == 0 || C == 0)
		return 0;
	vector<int> memo(C + 1, -1);
	for (int j = 0; j <= C; ++j)
		memo[j] = (j >= w[0] ? v[0] : 0);
	for (int i = 1; i < n; ++i){
		for (int j = C; j >= w[i]; ++j){
			memo[j] = max(memo[j], v[i] + memo[j - w[i]]);
		}
	}
	return memo[C];
}






// 0-1背包问题
// C ：背包可以装下的重量
// w ：每件物品的重量
// v ：每件物品的价值
int bR(const vector<int>& w, const vector<int>& v, int C){
	assert(w.size() == v.size() && C >= 0);
	int n = w.size();
	vector<vector<int>> memo(n, vector<int>(C + 1, -1));
	for (int j = 0; j < C + 1; ++j){
		memo[0][j] = (j >= w[0] ? v[0] : 0);
	}
	for (int i = 0; i < n; ++i){
		for (int j = 0; j <= C; ++j){
			memo[i][j] = memo[i - 1][j];
			if (j >= w[i]){
				memo[i][j] = max(memo[i][j], v[i] + memo[i][j - w[i]]);
			}
		}
	}
	return memo[n - 1][C];
}

int lengthOfLIS(vector<int>& nums){
	if (nums.size() == 0)
		return 0;
	// memo[i] 表示 nums[i] 为结尾的最长上升子序列长度
	vector<int> memo(nums.size(), 1);
	for (int i = 1; i < nums.size(); ++i){
		for (int j = 0; j < i; ++j){
			if (nums[j] < nums[i]){
				memo[i] = max(memo[i], 1 + memo[j]);
			}
		}
	}
	int res = 1;
	for (int i = 1; i < nums.size(); ++i){
		res = max(res, memo[i]);
	}
	return res;
}

bool canPartition(vector<int>& nums){
	int sum = 0;
	for (int i = 0; i < nums.size(); ++i){
		assert(nums[i] > 0);
		sum += nums[i];
	}
	if (sum % 2 != 0)
		return false;

}

void bbs(vector<int>& arr){
	int n = arr.size();
	for (int i = 0; i < n - 1; ++i){
		bool flag = false;
		for (int j = 0; j < n - i - 1; ++j){
			if (arr[j + 1] < arr[j]){
				swap(arr[j + 1], arr[j]);
				flag = true;
			}
		}
		if (flag)
			break;
	}
}
*/

// 堆排序
// 时间复杂度：O(nlogn)
// 空间复杂度：0(1)
// 稳定性：不稳定，调整的过程中，数据的相对位置可能发生变化
// 数据不敏感
void shiftDown(int* arr, int n, int parent){
	int child = (2 * parent + 1);

	while (child<n){
		if (child + 1 < n&&arr[child + 1] < arr[child])
			++child;
		if (arr[parent] > arr[child]){
			swap(arr[parent], arr[child]);
			parent = child;
			child = 2 * parent + 1;
		}
		else{
			break;
		}
	}
}
// 建堆
void buildHeap(int* arr,int n){
	for (int parent = (n - 2) / 2; parent >= 0; --parent){
		shiftDown(arr, n,parent);
	}
	// 循环删除
	// 小堆：升序
	// 大堆：降序
	while (n){
		swap(arr[0], arr[n - 1]);
		--n;
		shiftDown(arr, n, 0);
	}
}

void display(int* arr, int len){
	for (int i = 0; i < len; ++i){
		cout << arr[i] << " ";
	}
	cout << endl;
}
int mainew(){
	int arr[] = { 32,87,0,192,73,98,62,79,42,89 };
	int len = sizeof(arr) / sizeof(arr[0]);
	display(arr, len);
	buildHeap(arr, len);
	display(arr, len);
	system("pause");
	return 0;
}

int horaPartion(int* arr, int beg, int end){
	int jzz = arr[beg];
	while (beg < end){
		while (beg < end && jzz < arr[end])
			--end;
		arr[beg] = arr[end];
		while (beg < end && jzz >= arr[beg]){
			++beg;
		}
		arr[end] = arr[beg];
	}
	arr[beg] = jzz;
	return beg;
}

// hora 法划分
int partion(int* arr, int beg, int end){
	// 选择基准值
	int key = arr[beg];
	int start = beg;
	// 划分
	while (beg < end){
		// 从后往前找第一个小于 key 的位置
		while (beg < end && arr[end] >= key){
			--end;
		}
		// 从前向后找第一个大于key的位置
		while (beg < end && key >= arr[beg])
		{
			++beg;
		}
		// 交换 end , beg位置的值
		if (beg != end)
			swap(arr[beg], arr[end]);
	}
	// key 和相遇位置的数据交换
	swap(arr[beg], arr[start]);
	return beg;
}

void qs(int* arr, int beg, int end){
	if (beg >= end){
		return;
	}
	// 划分前的区间
	int keyPos = partion(arr, beg, end);
	//划分子区间
	qs(arr, beg, keyPos - 1);
	qs(arr, keyPos + 1, end);
}



// 
int p(int* arr, int beg, int end){
	int key = arr[beg];
	int start = beg;
	while (beg <end){
		while (beg < end && arr[end] >= key){
			--end;
		}
		while (beg < end && arr[beg] <= key){
			++beg;
		}
		if (beg <= end)
			swap(arr[beg], arr[end]);
	}
	swap(arr[beg], arr[start]);
	return beg;
}
//第二种划分方法：挖坑法
int partion2(int* arr, int beg, int end){
	int key = arr[beg];
	while (beg < end){
		// 从后向前找
		while (beg < end && arr[end] >= key){
			--end;
		}
		arr[beg] = arr[end];
		while (beg < end && arr[beg] < key)
			++beg;
		arr[end] = arr[beg];
	}
	// 最后一个坑：相遇的位置 --> 填基准值
	arr[beg] = key;
	// 返回基准值的位置
	return beg;
}
void qqss(int* arr, int beg, int end){
	if (beg >= end)
		return;
	int key = partion2(arr, beg, end);
	qqss(arr, beg, key - 1);
	qqss(arr, key + 1, end);
}
void t(){
	int arr[] = { 32, 9, 79, 8, 16, 34, 93, 78, 95, 1, 734, 89, 104, 38 };
	int len = sizeof(arr) / sizeof(arr[0]);
	display(arr, len);
	qqss(arr, 0, len - 1);
	display(arr, len);
}

// 第三种划分方式
// 前后指针法
// 数据被划分为两部分，大的向后挪动，小的向前挪动
int partion3(int* arr, int beg, int end){
	// 最后一个小于基准值的位置
	int prev = beg;
	//cur:新发现的下一个小于基准值的位置
	int cur = prev + 1;
	int key = arr[beg];
	while (cur <= end){
		// 新发现的小数据和尾指针指向的位置不连续，则中间含有大于基准值的数据
		// 故进行交换
		// 大数据向后挪，小数据向后挪
		if (arr[cur] < key && ++prev != cur)
			swap(arr[prev], arr[cur]);
		++cur;
	}
	swap(arr[beg], arr[prev]);
	return prev;
}
int maien(){
	t();
	system("pause");
	return 0;
}

// 前后指针法
int partionp(int* arr, int beg, int end){
	int prev = beg;
	int cur = prev + 1;
	int key = arr[prev];
	while (cur <= end){
		if (arr[cur] <= key && ++prev != cur)
			swap(arr[prev], arr[cur]);
		++cur;
	}
	swap(arr[prev], arr[beg]);
	return prev;
}

void ts(){
	string str("abcdefgjiklmnopqrst");
	size_t fp = str.find('a');// 找到第一个 'a' 结束
	size_t lp = str.rfind('a');// 反向查找，找到第一个 'a' 结束

	string file1 = "test.tar.gz.zip";

}

// 第三种划分方法：前后指针法
int partion33(int* arr,int beg,int end){
	int key = arr[beg];
	int prev = beg;
	int cur = prev + 1;
	while (cur <= end){
		// 下一个小于 key 的值且prev与cur不连续，换言之，两者之间有大于key的值就进行交换
		// 否则就直接++cur
		if (arr[cur] < key && ++prev != cur){
			swap(arr[cur], arr[prev]);
		}
		++cur;
	}
	swap(arr[prev], arr[beg]);
	return prev;
}

void tt(){
	string str("zheng hong is a handsome!");
	size_t pos = str.rfind(' ');
	size_t pos1 = str.find(' ');
	cout << pos << endl;
	cout << pos1 << endl;

	string file1("test.tar.gz.zip");
	pos = file1.rfind('.');
	string str2 = file1.substr(pos + 1, file1.size() - 1);
	cout << str2.c_str() << endl;

	cout << file1.c_str() << endl;


	// find如果找不到，返回 npos:static const size_t npos=-1 --> string的静态成员
	pos = string::npos;

	size_t s = string::npos;

}
int main(){
	tt();
	system("pause");
	return 0;
}
// string substr(size_t pos,size_t len=npos) ;
